from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.chrome.options import Options as ChromeOptions
import time
import pickle
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime
import shutil
import os
import re


def check_browser_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    browsers = {
        'chrome': False,
        'firefox': False
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Chrome/Chromium
    chrome_paths = [
        "/usr/bin/chromium",
        "/usr/bin/chromium-browser",
        "/usr/bin/google-chrome",
        "/usr/bin/google-chrome-stable",
        "chromium",
        "google-chrome"
    ]

    for path in chrome_paths:
        if shutil.which(path):
            browsers['chrome'] = True
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Chrome/Chromium: {path}")
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Firefox
    firefox_paths = ["firefox", "/usr/bin/firefox"]
    for path in firefox_paths:
        if shutil.which(path):
            browsers['firefox'] = True
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Firefox: {path}")
            break

    return browsers


def create_firefox_driver():
    """–°–æ–∑–¥–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–∞ (Chrome -> Firefox)"""

    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–æ–≤...")
    browsers = check_browser_availability()

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Chrome, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if browsers['chrome']:
        print("üöÄ –ü—Ä–æ–±—É—é —Å–æ–∑–¥–∞—Ç—å Chrome –¥—Ä–∞–π–≤–µ—Ä...")
        try:
            chrome_options = ChromeOptions()

            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
            chrome_options.add_argument("--headless=new")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-software-rasterizer")

            # User agent
            chrome_options.add_argument(
                "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

            # –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker
            chrome_options.add_argument("--disable-setuid-sandbox")
            chrome_options.add_argument("--single-process")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ Chrome/Chromium
            chrome_paths = [
                "/usr/bin/chromium",
                "/usr/bin/chromium-browser",
                "/usr/bin/google-chrome",
                "/usr/bin/google-chrome-stable"
            ]

            driver = None
            for chrome_path in chrome_paths:
                try:
                    chrome_options.binary_location = chrome_path
                    driver = webdriver.Chrome(options=chrome_options)
                    print(
                        f"‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –ø—É—Ç–µ–º: {chrome_path}")
                    return driver
                except Exception as e:
                    print(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Chrome —Å –ø—É—Ç–µ–º {chrome_path}: {e}")
                    continue

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Chrome, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏
            try:
                chrome_options.binary_location = None
                driver = webdriver.Chrome(options=chrome_options)
                print("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏)")
                return driver
            except Exception as e:
                print(f"‚ùå Chrome –¥—Ä–∞–π–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Chrome: {e}")
    else:
        print("‚ö†Ô∏è Chrome/Chromium –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

    # Fallback –Ω–∞ Firefox
    if browsers['firefox']:
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Firefox...")
        try:
            firefox_options = Options()
            firefox_options.add_argument("--headless")
            firefox_options.add_argument("--no-sandbox")
            firefox_options.add_argument("--disable-dev-shm-usage")

            # User agent –¥–ª—è Firefox
            firefox_options.set_preference("general.useragent.override",
                                           "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0")

            driver = webdriver.Firefox(options=firefox_options)
            print("‚úÖ Firefox –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return driver

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
    else:
        print("‚ùå Firefox –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –¥—Ä–∞–π–≤–µ—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Chrome/Chromium –∏–ª–∏ Firefox")
    return None


def phone_register_send(phone_num):
    driver = create_firefox_driver()
    if not driver:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Firefox –¥—Ä–∞–π–≤–µ—Ä")
        return

    driver.get("https://ads.telegram.org")

    pole_phone = driver.find_element(By.CSS_SELECTOR, ".btn.pr-btn.login-link")
    pole_phone.click()

    phone = phone_num
    vvod = driver.find_element(
        By.CSS_SELECTOR, '.form-control.pr-form-control.input-lg')
    vvod.send_keys(phone)

    send_sms = driver.find_element(
        By.XPATH, "//button[@type='submit' and contains(@class, 'btn') and contains(text(), 'Next')]")
    send_sms.click()

    time.sleep(30)

    save_cookies(driver)
    try:
        driver.quit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")


def save_cookies(driver, filename="cookies_user.pkl"):
    cookies = driver.get_cookies()

    with open(filename, 'wb') as f:
        pickle.dump(cookies, f)

    print(f"–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(cookies)} —à—Ç—É–∫")


def load_cookies(driver, filename="cookies_user.pkl"):
    try:
        with open(filename, 'rb') as f:
            cookies = pickle.load(f)

        for cookie in cookies:
            driver.add_cookie(cookie)

        print(f"–ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(cookies)} —à—Ç—É–∫")
        return True
    except FileNotFoundError:
        print("–§–∞–π–ª —Å –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False


def is_authorized(driver):
    try:
        driver.find_element(By.CSS_SELECTOR, ".pr-account-button-content")
        return True
    except:
        return False


def login_with_cookies():
    driver = create_firefox_driver()
    if not driver:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Firefox –¥—Ä–∞–π–≤–µ—Ä")
        return None

    driver.get("https://ads.telegram.org")

    if load_cookies(driver):
        driver.refresh()

        if is_authorized(driver):
            print("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –∫—É–∫–∏!")
            return driver
        else:
            print("–ö—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            driver.quit()
            return None
    else:
        print("–§–∞–π–ª —Å –∫—É–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        driver.quit()
        return None


def find_channel_by_name(driver, channel_name):
    try:
        channel_elem = driver.find_element(
            By.XPATH, f"//div[@class='pr-account-button-title' and contains(text(), '{channel_name}')]")
        print(f'–∫–∞–Ω–∞–ª {channel_name} –Ω–∞—à–µ–ª—Å—è!')
        return channel_elem
    except:
        print(f"–ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None


def _safe_text(elem):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."""
    try:
        if elem is None:
            return ""
        return elem.text.strip()
    except Exception:
        return ""


def format_date_added(date_string):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü/–¥–µ–Ω—å/–≥–æ–¥ –≤—Ä–µ–º—è
    –ü—Ä–∏–º–µ—Ä: 2/18/25 15:29
    """
    if not date_string or date_string.strip() == "":
        return ""

    try:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        date_string = date_string.strip()
        # print(f"[–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´] üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞—Ç—É: '{date_string}'")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ –∏–∑ Telegram Ads
        date_formats = [
            # 2 May 24 17:25 (–ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –†–ï–ê–õ–¨–ù–´–ô –§–û–†–ú–ê–¢)
            "%d %b %y %H:%M",
            "%d %b %Y %H:%M",      # 2 May 2024 17:25
            "%d %B %y %H:%M",      # 2 May 24 17:25
            "%d %B %Y %H:%M",      # 2 May 2024 17:25
            "%d %b %y",            # 27 Feb 25
            "%d %b %Y",            # 27 Feb 2025
            "%d %B %y",            # 27 February 25
            "%d %B %Y",            # 27 February 2025
            "%Y-%m-%d %H:%M",      # 2025-02-18 15:29
            "%d.%m.%Y %H:%M",      # 18.02.2025 15:29
            "%d/%m/%Y %H:%M",      # 18/02/2025 15:29
            "%m/%d/%Y %H:%M",      # 02/18/2025 15:29
            "%Y-%m-%d",            # 2025-02-18
            "%d.%m.%Y",            # 18.02.2025
            "%d/%m/%Y",            # 18/02/2025
            "%m/%d/%Y",            # 02/18/2025
        ]

        parsed_date = None
        for fmt in date_formats:
            try:
                # print(f"[–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´] üîç –ü—Ä–æ–±—É—é —Ñ–æ—Ä–º–∞—Ç: {fmt}")
                parsed_date = datetime.strptime(date_string, fmt)
                # print(f"[–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: {fmt}")
                break
            except ValueError as e:
                # print(f"[–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´] ‚ùå –§–æ—Ä–º–∞—Ç {fmt} –Ω–µ –ø–æ–¥–æ—à–µ–ª: {e}")
                continue

        if parsed_date is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            # print(f"[–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_string}', –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω—É—é")
            return date_string

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–µ—Å—è—Ü/–¥–µ–Ω—å/–≥–æ–¥ –≤—Ä–µ–º—è
        result = parsed_date.strftime("%m/%d/%y %H:%M")
        # print(f"[–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{date_string}' -> '{result}'")
        return result

    except Exception as e:
        print(
            f"[–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã '{date_string}': {e}")
        return date_string


def safe_checkbox_interaction(driver, checkbox_name, should_be_selected):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —á–µ–∫–±–æ–∫—Å–æ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    """
    max_attempts = 3

    for attempt in range(max_attempts):
        try:
            print(
                f"[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞: {checkbox_name}")

            # –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å
            checkbox = driver.find_element(
                By.CSS_SELECTOR, f"input[name='{checkbox_name}']")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
            driver.execute_script(
                "arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", checkbox)
            time.sleep(0.5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            is_selected = checkbox.is_selected()

            if should_be_selected and not is_selected:
                print(
                    f"[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚úÖ –í–∫–ª—é—á–∞—é —á–µ–∫–±–æ–∫—Å: {checkbox_name}")
                driver.execute_script("arguments[0].click();", checkbox)
                time.sleep(0.3)
            elif not should_be_selected and is_selected:
                print(
                    f"[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] üîÑ –û—Ç–∫–ª—é—á–∞—é —á–µ–∫–±–æ–∫—Å: {checkbox_name}")
                driver.execute_script("arguments[0].click();", checkbox)
                time.sleep(0.3)
            else:
                print(
                    f"[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚úÖ –ß–µ–∫–±–æ–∫—Å {checkbox_name} —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

            return True

        except Exception as e:
            print(
                f"[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {checkbox_name}: {e}")
            if attempt < max_attempts - 1:
                time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                print(
                    f"[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å {checkbox_name} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                return False

    return False


def _load_all_rows_by_scrolling(driver, wait):
    """
    üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
    –£—Å—Ç—Ä–∞–Ω—è–µ—Ç time.sleep() –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç WebDriverWait
    """
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å
        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, ".js-ads-table-body")))

        last_height = driver.execute_script(
            "return document.body.scrollHeight")

        scroll_iterations = 0

        while True:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            driver.execute_script(
                "window.scrollTo(0, document.body.scrollHeight);")

            # üöÄ –î–û–ë–ê–í–õ–ï–ù–û: –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            print(f"[–ü–ê–†–°–ò–ù–ì] ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
            time.sleep(1)

            # üöÄ –£–í–ï–õ–ò–ß–ï–ù–û –í–†–ï–ú–Ø: –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (—Ç–µ–ø–µ—Ä—å –¥–æ 8 —Å–µ–∫—É–Ω–¥)
            try:
                # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —É–≤–µ–ª–∏—á–∏—Ç—Å—è
                WebDriverWait(driver, 8).until(lambda d: d.execute_script(
                    "return document.body.scrollHeight") > last_height)
                new_height = driver.execute_script(
                    "return document.body.scrollHeight")
                last_height = new_height
                scroll_iterations += 1
                print(
                    f"[–ü–ê–†–°–ò–ù–ì] ‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞ {scroll_iterations}, –≤—ã—Å–æ—Ç–∞: {new_height}")
            except TimeoutException:
                # –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ 8 —Å–µ–∫—É–Ω–¥, –≤—ã—Ö–æ–¥–∏–º
                print(
                    "[–ü–ê–†–°–ò–ù–ì] ‚úÖ –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–µ–∫—Ä–∞—â–∞—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É.")
                break

        print(
            f"[–ü–ê–†–°–ò–ù–ì] –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {scroll_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π")

        # üöÄ –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("[–ü–ê–†–°–ò–ù–ì] ‚è≥ –û–∂–∏–¥–∞—é 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        time.sleep(5)

    except Exception as e:
        print(f"[–ü–ê–†–°–ò–ù–ì] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ: {e}")


def parse_table_data_optimized(driver):
    """
    üöÄüöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    """
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 20 —Å–µ–∫—É–Ω–¥)
        wait = WebDriverWait(driver, 20)

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_selectors = [
            ".js-ads-table-body",
            ".ads-table",
            ".table-body",
            "[class*='table']",
            "[class*='ads']"
        ]

        table_found = False
        for selector in table_selectors:
            try:
                print(f"[–ü–ê–†–°–ò–ù–ì] –ü—Ä–æ–±—É—é —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                wait.until(EC.presence_of_element_located(
                    (By.CSS_SELECTOR, selector)))
                print(f"[–ü–ê–†–°–ò–ù–ì] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                table_found = True
                break
            except Exception as e:
                print(f"[–ü–ê–†–°–ò–ù–ì] ‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                continue

        if not table_found:
            print(f"[–ü–ê–†–°–ò–ù–ì] ‚ùå –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ —Å –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º")
            return []

        # –ü–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        try:
            _load_all_rows_by_scrolling(driver, wait)
        except Exception as e:
            print(
                f"[–ü–ê–†–°–ò–ù–ì] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π: {e}")

        # üöÄüöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ HTML
        print("[–ü–ê–†–°–ò–ù–ì] üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É HTML...")

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML —Ç–∞–±–ª–∏—Ü—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        table_element = driver.find_element(
            By.CSS_SELECTOR, ".js-ads-table-body")
        table_html = table_element.get_attribute('outerHTML')

        # –ü–∞—Ä—Å–∏–º HTML –ª–æ–∫–∞–ª—å–Ω–æ —Å BeautifulSoup (–ú–ù–û–ì–û–ö–†–ê–¢–ù–û –±—ã—Å—Ç—Ä–µ–µ)
        soup = BeautifulSoup(table_html, 'lxml')
        rows = soup.find_all('tr')

        print(f"[–ü–ê–†–°–ò–ù–ì] üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ HTML: {len(rows)}")

        # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        if len(rows) > 0:
            first_row = rows[0]
            first_cells = first_row.find_all('td')
            print(
                f"[–ü–ê–†–°–ò–ù–ì] üîç –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(first_cells)} —è—á–µ–µ–∫")
            if len(first_cells) > 0:
                print(
                    f"[–ü–ê–†–°–ò–ù–ì] üîç –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏: {first_cells[0].get_text(strip=True)[:50]}...")

        parsed_data = []
        skipped_rows = 0

        for i, row in enumerate(rows):
            try:
                cells = row.find_all('td')
                if not cells:
                    skipped_rows += 1
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–µ–Ω–µ–µ —á–µ–º 5 —è—á–µ–π–∫–∞–º–∏ (–Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                if len(cells) < 5:
                    print(
                        f"[–ü–ê–†–°–ò–ù–ì] ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i} –ø—Ä–æ–ø—É—â–µ–Ω–∞: —Ç–æ–ª—å–∫–æ {len(cells)} —è—á–µ–µ–∫")
                    skipped_rows += 1
                    continue

                # 1) –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL
                title_cell = cells[0]
                title_link = title_cell.find('a', class_='pr-link')

                # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å target="_blank" –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º href
                url_link = title_cell.find('a', {'target': '_blank'})

                ad_title = title_link.get_text(
                    strip=True) if title_link else ""

                # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ href
                if url_link and url_link.get('href'):
                    ad_url = url_link.get('href')
                else:
                    ad_url = ""

                # üöÄ –ù–û–í–û–ï: –û–±—ä–µ–¥–∏–Ω—è–µ–º Title –∏ URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                if ad_url:
                    ad_title_with_url = f"{ad_title}\n{ad_url}"
                else:
                    ad_title_with_url = ad_title

                # –î–∞–ª–µ–µ —è—á–µ–π–∫–∏ –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É –∫–∞–∫ –≤ —à–∞–ø–∫–µ
                def cell_text(idx):
                    try:
                        if idx >= len(cells):
                            return ""
                        cell = cells[idx]
                        link = cell.find('a', class_='pr-link')
                        if link:
                            return link.get_text(strip=True).replace("\n", " ")
                        else:
                            return cell.get_text(strip=True).replace("\n", " ")
                    except Exception:
                        return ""

                # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ HTML
                # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: Ad Title(0), Views(1), Opens(2), Clicks(3), Actions(4), CTR(5), CVR(6), CPM(7), CPC(8), CPA(9), Spent(10), Budget(11), Target(12), Status(13), Date(14)
                views = cell_text(1)
                opens = cell_text(2)  # –≠—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                clicks = cell_text(3)
                actions = cell_text(4)
                ctr = cell_text(5)
                cvr = cell_text(6)
                cpm = cell_text(7)
                cpc = cell_text(8)
                cpa = cell_text(9)
                spent = cell_text(10)
                budget = cell_text(11)
                target = cell_text(12)  # –≠—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                status = cell_text(13)
                date_added = cell_text(14)

                # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                def clean_currency_value(value):
                    """–û—á–∏—â–∞–µ—Ç –≤–∞–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: —É–±–∏—Ä–∞–µ—Ç –∑–Ω–∞–∫–∏ –≤–∞–ª—é—Ç –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–æ—á–∫–∏ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ"""
                    if not value or value == '‚Äì':
                        return ""

                    # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –≤–∞–ª—é—Ç
                    cleaned = value.replace('‚Ç¨', '').replace(
                        '$', '').replace('‚ÇΩ', '').strip()

                    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ
                    cleaned = cleaned.replace('.', ',')

                    return cleaned

                try:
                    cpm_clean = cpm.replace('‚Ç¨', '').replace(',', '.')
                    cpm_num = float(
                        cpm_clean) if cpm_clean and cpm_clean != '‚Äì' else 0.0
                except ValueError:
                    cpm_num = cpm

                try:
                    budget_clean = budget.replace('‚Ç¨', '').replace(',', '.')
                    budget_num = float(
                        budget_clean) if budget_clean and budget_clean != '‚Äì' else 0.0
                except ValueError:
                    budget_num = budget

                # üöÄ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ CPC, CPA, Spent
                cpc_cleaned = clean_currency_value(cpc)
                cpa_cleaned = clean_currency_value(cpa)
                spent_cleaned = clean_currency_value(spent)

                row_data = {
                    'Ad Title': ad_title_with_url,  # üöÄ –ò–ó–ú–ï–ù–ï–ù–û: Title + URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                    'Views': views,
                    'Clicks': clicks,
                    'Actions': actions,
                    'CTR': ctr,
                    'CVR': cvr,
                    'CPM': cpm_num,
                    'CPC': cpc_cleaned,  # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    'CPA': cpa_cleaned,  # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    'Spent': spent_cleaned,  # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    'Budget': budget_num,
                    'Status': status,
                    'Date Added': date_added
                }
                parsed_data.append(row_data)

                # üîç –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å–ø–∞—Ä—Å–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                if len(parsed_data) == 1:
                    print(f"[–ü–ê–†–°–ò–ù–ì] üîç –ü—Ä–∏–º–µ—Ä —Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:")
                    print(f"  - Title with URL: {ad_title_with_url[:100]}...")
                    print(
                        f"  - Views: {views}, Clicks: {clicks}, Actions: {actions}")
                    print(f"  - CTR: {ctr}, CVR: {cvr}")
                    print(
                        f"  - CPM: {cpm_num}, CPC: {cpc_cleaned}, CPA: {cpa_cleaned}")
                    print(f"  - Spent: {spent_cleaned}, Budget: {budget_num}")
                    print(f"  - Status: {status}")

            except Exception as e:
                print(f"[–ü–ê–†–°–ò–ù–ì] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                skipped_rows += 1
                continue

        print(f"üöÄ –°–ø–∞—Ä—Å–µ–Ω–æ {len(parsed_data)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(rows)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_data)}")
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: {skipped_rows}")

        return parsed_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return []


def save_to_excel_optimized(data, channel_name, filename=None):
    """
    üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    if not filename:
        # –û—á–∏—â–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_channel_name = "".join(
            c for c in channel_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{safe_channel_name}_{timestamp}.xlsx"

    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(data)

        # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: Ad Title —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç Title + URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        columns_order = ['Ad Title', 'Views', 'Clicks', 'Actions', 'CTR', 'CVR',
                         'CPM', 'CPC', 'CPA', 'Spent', 'Budget', 'Status', 'Date Added']
        df = df.reindex(columns=columns_order)

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_columns = ['CPM', 'Budget']
        for col in numeric_columns:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')

        # üöÄ –ù–û–í–û–ï: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ Date Added
        print(f"[–°–û–•–†–ê–ù–ï–ù–ò–ï] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

        if 'Date Added' in df.columns:
            print(
                f"[–°–û–•–†–ê–ù–ï–ù–ò–ï] üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ Date Added, –Ω–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            print(
                f"[–°–û–•–†–ê–ù–ï–ù–ò–ï] üîç –ü—Ä–∏–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∞—Ç—ã: {df['Date Added'].iloc[0] if len(df) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∫–∞–∂–¥–æ–π –¥–∞—Ç–µ
            df['Date Added'] = df['Date Added'].apply(format_date_added)

            print(
                f"[–°–û–•–†–ê–ù–ï–ù–ò–ï] üîç –ü—Ä–∏–º–µ—Ä –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç—ã: {df['Date Added'].iloc[0] if len(df) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            print(
                f"[–°–û–•–†–ê–ù–ï–ù–ò–ï] ‚úÖ –î–∞—Ç—ã –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü/–¥–µ–Ω—å/–≥–æ–¥ –≤—Ä–µ–º—è")
        else:
            print(f"[–°–û–•–†–ê–ù–ï–ù–ò–ï] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ Date Added –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DataFrame")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df.to_excel(filename, index=False, engine='openpyxl')

        print(f"üöÄ –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ '{channel_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return filename

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")
        return None


def configure_table_settings(driver):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É - –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    """
    try:
        wait = WebDriverWait(driver, 10)

        # üöÄ –î–û–ë–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        driver.maximize_window()
        time.sleep(1)

        # –ù–∞—Ö–æ–¥–∏–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
        settings_button = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, ".pr-table-settings")))
        print("[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–∂–∏–º–∞—é...")
        settings_button.click()

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, ".pr-layer-popup.popup-no-close")))
        print("[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚úÖ –ü–æ–ø–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä—ã—Ç")

        # –°–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (—Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
        required_checkboxes = [
            "views", "clicks", "actions", "ctr", "cvr", "cpm", "cpc",
            "cpa", "spent", "budget", "status", "date"
        ]

        # –°–ø–∏—Å–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ)
        all_checkboxes = [
            "opens", "target", "url", "action"
        ]

        # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        for checkbox_name in all_checkboxes:
            safe_checkbox_interaction(
                driver, checkbox_name, should_be_selected=False)

        # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        for checkbox_name in required_checkboxes:
            safe_checkbox_interaction(
                driver, checkbox_name, should_be_selected=True)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–∫
        close_button = driver.find_element(
            By.CSS_SELECTOR, ".popup-cancel-btn")
        close_button.click()
        print("[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –ø–æ–ø–∞–ø –∑–∞–∫—Ä—ã—Ç")

        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        time.sleep(2)

        return True

    except Exception as e:
        print(f"[–ù–ê–°–¢–†–û–ô–ö–ê –¢–ê–ë–õ–ò–¶–´] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False


def parse_channel_data_optimized(driver, channel_name, save_excel=True):
    """
    üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª
        channel_element = find_channel_by_name(driver, channel_name)

        if not channel_element:
            return {'error': f'–ö–∞–Ω–∞–ª "{channel_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–∞–Ω–∞–ª—É
        channel_element.click()

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ time.sleep()
        wait = WebDriverWait(driver, 15)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞
            wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".js-ads-table-body")))
            print("[–ü–ê–†–°–ò–ù–ì] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ–∂–∏–¥–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 2 —Å–µ–∫...")
            time.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ 15 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # üöÄ –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        print("[–ü–ê–†–°–ò–ù–ì] üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ç–∞–±–ª–∏—Ü—É...")
        if not configure_table_settings(driver):
            print(
                "[–ü–ê–†–°–ò–ù–ì] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        table_data = parse_table_data_optimized(driver)

        result = {
            'channel_name': channel_name,
            'table_data': table_data,
            'status': 'success'
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if save_excel and table_data:
            excel_file = save_to_excel_optimized(table_data, channel_name)
            if excel_file:
                result['excel_file'] = excel_file

        return result

    except Exception as e:
        return {'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞: {e}'}
