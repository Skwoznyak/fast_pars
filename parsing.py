from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.chrome.options import Options as ChromeOptions
import time
import pickle
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime


def create_firefox_driver():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Chrome –¥—Ä–∞–π–≤–µ—Ä —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    chrome_options = ChromeOptions()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-software-rasterizer")

    # User agent
    chrome_options.add_argument(
        "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

    # –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker
    chrome_options.add_argument("--disable-setuid-sandbox")
    chrome_options.add_argument("--single-process")

    # –ü—É—Ç—å –∫ Chromium –≤ Debian
    chrome_options.binary_location = "/usr/bin/chromium"

    try:
        driver = webdriver.Chrome(options=chrome_options)
        print("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return driver
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
        return None


def phone_register_send(phone_num):
    driver = create_firefox_driver()
    if not driver:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Firefox –¥—Ä–∞–π–≤–µ—Ä")
        return

    driver.get("https://ads.telegram.org")

    pole_phone = driver.find_element(By.CSS_SELECTOR, ".btn.pr-btn.login-link")
    pole_phone.click()

    phone = phone_num
    vvod = driver.find_element(
        By.CSS_SELECTOR, '.form-control.pr-form-control.input-lg')
    vvod.send_keys(phone)

    send_sms = driver.find_element(
        By.XPATH, "//button[@type='submit' and contains(@class, 'btn') and contains(text(), 'Next')]")
    send_sms.click()

    time.sleep(30)

    save_cookies(driver)
    try:
        driver.quit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")


def save_cookies(driver, filename="cookies_user.pkl"):
    cookies = driver.get_cookies()

    with open(filename, 'wb') as f:
        pickle.dump(cookies, f)

    print(f"–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(cookies)} —à—Ç—É–∫")


def load_cookies(driver, filename="cookies_user.pkl"):
    try:
        with open(filename, 'rb') as f:
            cookies = pickle.load(f)

        for cookie in cookies:
            driver.add_cookie(cookie)

        print(f"–ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(cookies)} —à—Ç—É–∫")
        return True
    except FileNotFoundError:
        print("–§–∞–π–ª —Å –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False


def is_authorized(driver):
    try:
        driver.find_element(By.CSS_SELECTOR, ".pr-account-button-content")
        return True
    except:
        return False


def login_with_cookies():
    driver = create_firefox_driver()
    if not driver:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Firefox –¥—Ä–∞–π–≤–µ—Ä")
        return None

    driver.get("https://ads.telegram.org")

    if load_cookies(driver):
        driver.refresh()

        if is_authorized(driver):
            print("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –∫—É–∫–∏!")
            return driver
        else:
            print("–ö—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            driver.quit()
            return None
    else:
        print("–§–∞–π–ª —Å –∫—É–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        driver.quit()
        return None


def find_channel_by_name(driver, channel_name):
    try:
        channel_elem = driver.find_element(
            By.XPATH, f"//div[@class='pr-account-button-title' and contains(text(), '{channel_name}')]")
        print(f'–∫–∞–Ω–∞–ª {channel_name} –Ω–∞—à–µ–ª—Å—è!')
        return channel_elem
    except:
        print(f"–ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None


def _safe_text(elem):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."""
    try:
        if elem is None:
            return ""
        return elem.text.strip()
    except Exception:
        return ""


def _load_all_rows_by_scrolling(driver, wait):
    """
    üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
    –£—Å—Ç—Ä–∞–Ω—è–µ—Ç time.sleep() –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç WebDriverWait
    """
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å
        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, ".js-ads-table-body")))

        last_height = driver.execute_script(
            "return document.body.scrollHeight")

        scroll_iterations = 0

        while True:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            driver.execute_script(
                "window.scrollTo(0, document.body.scrollHeight);")

            # üöÄ –î–û–ë–ê–í–õ–ï–ù–û: –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            print(f"[–ü–ê–†–°–ò–ù–ì] ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
            time.sleep(1)

            # üöÄ –£–í–ï–õ–ò–ß–ï–ù–û –í–†–ï–ú–Ø: –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (—Ç–µ–ø–µ—Ä—å –¥–æ 8 —Å–µ–∫—É–Ω–¥)
            try:
                # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —É–≤–µ–ª–∏—á–∏—Ç—Å—è
                WebDriverWait(driver, 8).until(lambda d: d.execute_script(
                    "return document.body.scrollHeight") > last_height)
                new_height = driver.execute_script(
                    "return document.body.scrollHeight")
                last_height = new_height
                scroll_iterations += 1
                print(
                    f"[–ü–ê–†–°–ò–ù–ì] ‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞ {scroll_iterations}, –≤—ã—Å–æ—Ç–∞: {new_height}")
            except TimeoutException:
                # –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ 8 —Å–µ–∫—É–Ω–¥, –≤—ã—Ö–æ–¥–∏–º
                print(
                    "[–ü–ê–†–°–ò–ù–ì] ‚úÖ –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–µ–∫—Ä–∞—â–∞—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É.")
                break

        print(
            f"[–ü–ê–†–°–ò–ù–ì] –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {scroll_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π")

        # üöÄ –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("[–ü–ê–†–°–ò–ù–ì] ‚è≥ –û–∂–∏–¥–∞—é 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        time.sleep(5)

    except Exception as e:
        print(f"[–ü–ê–†–°–ò–ù–ì] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ: {e}")


def parse_table_data_optimized(driver):
    """
    üöÄüöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    """
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 20 —Å–µ–∫—É–Ω–¥)
        wait = WebDriverWait(driver, 20)

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_selectors = [
            ".js-ads-table-body",
            ".ads-table",
            ".table-body",
            "[class*='table']",
            "[class*='ads']"
        ]

        table_found = False
        for selector in table_selectors:
            try:
                print(f"[–ü–ê–†–°–ò–ù–ì] –ü—Ä–æ–±—É—é —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                wait.until(EC.presence_of_element_located(
                    (By.CSS_SELECTOR, selector)))
                print(f"[–ü–ê–†–°–ò–ù–ì] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                table_found = True
                break
            except Exception as e:
                print(f"[–ü–ê–†–°–ò–ù–ì] ‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                continue

        if not table_found:
            print(f"[–ü–ê–†–°–ò–ù–ì] ‚ùå –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ —Å –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º")
            return []

        # –ü–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        try:
            _load_all_rows_by_scrolling(driver, wait)
        except Exception as e:
            print(
                f"[–ü–ê–†–°–ò–ù–ì] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π: {e}")

        # üöÄüöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ HTML
        print("[–ü–ê–†–°–ò–ù–ì] üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É HTML...")

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML —Ç–∞–±–ª–∏—Ü—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        table_element = driver.find_element(
            By.CSS_SELECTOR, ".js-ads-table-body")
        table_html = table_element.get_attribute('outerHTML')

        # –ü–∞—Ä—Å–∏–º HTML –ª–æ–∫–∞–ª—å–Ω–æ —Å BeautifulSoup (–ú–ù–û–ì–û–ö–†–ê–¢–ù–û –±—ã—Å—Ç—Ä–µ–µ)
        soup = BeautifulSoup(table_html, 'lxml')
        rows = soup.find_all('tr')

        print(f"[–ü–ê–†–°–ò–ù–ì] üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ HTML: {len(rows)}")

        # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        if len(rows) > 0:
            first_row = rows[0]
            first_cells = first_row.find_all('td')
            print(
                f"[–ü–ê–†–°–ò–ù–ì] üîç –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(first_cells)} —è—á–µ–µ–∫")
            if len(first_cells) > 0:
                print(
                    f"[–ü–ê–†–°–ò–ù–ì] üîç –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏: {first_cells[0].get_text(strip=True)[:50]}...")

        parsed_data = []
        skipped_rows = 0

        for i, row in enumerate(rows):
            try:
                cells = row.find_all('td')
                if not cells:
                    skipped_rows += 1
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–µ–Ω–µ–µ —á–µ–º 5 —è—á–µ–π–∫–∞–º–∏ (–Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                if len(cells) < 5:
                    print(
                        f"[–ü–ê–†–°–ò–ù–ì] ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i} –ø—Ä–æ–ø—É—â–µ–Ω–∞: —Ç–æ–ª—å–∫–æ {len(cells)} —è—á–µ–µ–∫")
                    skipped_rows += 1
                    continue

                # 1) –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL
                title_cell = cells[0]
                title_link = title_cell.find('a', class_='pr-link')

                # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å target="_blank" –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º href
                url_link = title_cell.find('a', {'target': '_blank'})

                ad_title = title_link.get_text(
                    strip=True) if title_link else ""

                # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ href
                if url_link and url_link.get('href'):
                    ad_url = url_link.get('href')
                else:
                    ad_url = ""

                # üöÄ –ù–û–í–û–ï: –û–±—ä–µ–¥–∏–Ω—è–µ–º Title –∏ URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                if ad_url:
                    ad_title_with_url = f"{ad_title}\n{ad_url}"
                else:
                    ad_title_with_url = ad_title

                # –î–∞–ª–µ–µ —è—á–µ–π–∫–∏ –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É –∫–∞–∫ –≤ —à–∞–ø–∫–µ
                def cell_text(idx):
                    try:
                        if idx >= len(cells):
                            return ""
                        cell = cells[idx]
                        link = cell.find('a', class_='pr-link')
                        if link:
                            return link.get_text(strip=True).replace("\n", " ")
                        else:
                            return cell.get_text(strip=True).replace("\n", " ")
                    except Exception:
                        return ""

                # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è: [0] —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫/URL
                views = cell_text(1)
                opened = cell_text(2)
                clicks = cell_text(3)
                actions = cell_text(4)
                ctr = cell_text(5)
                cvr = cell_text(6)
                cpm = cell_text(7)
                cpc = cell_text(8)
                cpa = cell_text(9)
                spent = cell_text(10)
                budget = cell_text(11)
                target = cell_text(12)
                status = cell_text(13)
                date_added = cell_text(14)

                # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                try:
                    cpm_clean = cpm.replace('‚Ç¨', '').replace(',', '.')
                    cpm_num = float(
                        cpm_clean) if cpm_clean and cpm_clean != '‚Äì' else 0.0
                except ValueError:
                    cpm_num = cpm

                try:
                    budget_clean = budget.replace('‚Ç¨', '').replace(',', '.')
                    budget_num = float(
                        budget_clean) if budget_clean and budget_clean != '‚Äì' else 0.0
                except ValueError:
                    budget_num = budget

                row_data = {
                    'Ad Title': ad_title_with_url,  # üöÄ –ò–ó–ú–ï–ù–ï–ù–û: Title + URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                    'Views': views,
                    'Actions': actions,
                    'CPM': cpm_num,
                    'Budget': budget_num,
                    'Target': target,
                    'Status': status,
                    'Date Added': date_added
                }
                parsed_data.append(row_data)

                # üîç –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å–ø–∞—Ä—Å–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                if len(parsed_data) == 1:
                    print(f"[–ü–ê–†–°–ò–ù–ì] üîç –ü—Ä–∏–º–µ—Ä —Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:")
                    print(f"  - Title with URL: {ad_title_with_url[:100]}...")
                    print(f"  - Views: {views}, Actions: {actions}")
                    print(f"  - CPM: {cpm_num}, Budget: {budget_num}")

            except Exception as e:
                print(f"[–ü–ê–†–°–ò–ù–ì] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                skipped_rows += 1
                continue

        print(f"üöÄ –°–ø–∞—Ä—Å–µ–Ω–æ {len(parsed_data)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(rows)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_data)}")
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: {skipped_rows}")

        return parsed_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return []


def save_to_excel_optimized(data, channel_name, filename=None):
    """
    üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    if not filename:
        # –û—á–∏—â–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_channel_name = "".join(
            c for c in channel_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{safe_channel_name}_{timestamp}.xlsx"

    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(data)

        # üöÄ –û–ë–ù–û–í–õ–ï–ù–û: Ad Title —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç Title + URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        columns_order = ['Ad Title', 'Views', 'Actions',
                         'CPM', 'Budget', 'Target', 'Status', 'Date Added']
        df = df.reindex(columns=columns_order)

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_columns = ['CPM', 'Budget']
        for col in numeric_columns:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df.to_excel(filename, index=False, engine='openpyxl')

        print(f"üöÄ –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ '{channel_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return filename

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")
        return None


def parse_channel_data_optimized(driver, channel_name, save_excel=True):
    """
    üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª
        channel_element = find_channel_by_name(driver, channel_name)

        if not channel_element:
            return {'error': f'–ö–∞–Ω–∞–ª "{channel_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–∞–Ω–∞–ª—É
        channel_element.click()

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ time.sleep()
        wait = WebDriverWait(driver, 15)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞
            wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".js-ads-table-body")))
            print("[–ü–ê–†–°–ò–ù–ì] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ–∂–∏–¥–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 2 —Å–µ–∫...")
            time.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ 15 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        table_data = parse_table_data_optimized(driver)

        result = {
            'channel_name': channel_name,
            'table_data': table_data,
            'status': 'success'
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if save_excel and table_data:
            excel_file = save_to_excel_optimized(table_data, channel_name)
            if excel_file:
                result['excel_file'] = excel_file

        return result

    except Exception as e:
        return {'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞: {e}'}
